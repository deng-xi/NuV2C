#line 2 "verilog_lex.yy.cpp"

#line 4 "verilog_lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyverilog_create_buffer
#define yy_delete_buffer yyverilog_delete_buffer
#define yy_flex_debug yyverilog_flex_debug
#define yy_init_buffer yyverilog_init_buffer
#define yy_flush_buffer yyverilog_flush_buffer
#define yy_load_buffer_state yyverilog_load_buffer_state
#define yy_switch_to_buffer yyverilog_switch_to_buffer
#define yyin yyverilogin
#define yyleng yyverilogleng
#define yylex yyveriloglex
#define yylineno yyveriloglineno
#define yyout yyverilogout
#define yyrestart yyverilogrestart
#define yytext yyverilogtext
#define yywrap yyverilogwrap
#define yyalloc yyverilogalloc
#define yyrealloc yyverilogrealloc
#define yyfree yyverilogfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyverilogrestart(yyverilogin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyverilogleng;

extern FILE *yyverilogin, *yyverilogout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyverilogtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yyverilogtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyverilogrestart()), so that the user can continue scanning by
	 * just pointing yyverilogin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yyverilogtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyverilogleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yyverilogwrap()'s to do buffer switches
 * instead of setting up a fresh yyverilogin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyverilogrestart (FILE *input_file  );
void yyverilog_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yyverilog_create_buffer (FILE *file,int size  );
void yyverilog_delete_buffer (YY_BUFFER_STATE b  );
void yyverilog_flush_buffer (YY_BUFFER_STATE b  );
void yyverilogpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yyverilogpop_buffer_state (void );

static void yyverilogensure_buffer_stack (void );
static void yyverilog_load_buffer_state (void );
static void yyverilog_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yyverilog_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yyverilog_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yyverilog_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yyverilog_scan_bytes (yyconst char *bytes,int len  );

void *yyverilogalloc (yy_size_t  );
void *yyverilogrealloc (void *,yy_size_t  );
void yyverilogfree (void *  );

#define yy_new_buffer yyverilog_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyverilogensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyverilog_create_buffer(yyverilogin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyverilogensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyverilog_create_buffer(yyverilogin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyverilogin = (FILE *) 0, *yyverilogout = (FILE *) 0;

typedef int yy_state_type;

extern int yyveriloglineno;

int yyveriloglineno = 1;

extern char *yyverilogtext;
#define yytext_ptr yyverilogtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yyverilogtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyverilogleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 305
#define YY_END_OF_BUFFER 306
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1064] =
    {   0,
        0,    0,    0,    0,    0,    0,   14,   14,  306,    1,
      304,    3,    2,  293,   20,    9,  304,  304,   32,   22,
      304,  304,   30,   18,   19,   31,  299,   48,   39,  304,
       41,   47,  302,  304,   26,  304,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,   24,   21,
        7,    6,    7,   14,   15,   10,  305,    3,    0,   34,
       67,  294,  294,  294,  294,  294,   59,   37,   60,    0,
        0,    0,    0,    0,    0,    0,    0,   16,   17,   57,
       51,   54,   53,   52,   55,   56,   29,    5,    0,   58,

        0,    0,  299,    0,   45,   40,   33,   42,   43,  302,
      303,   61,   28,  292,  292,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  209,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  105,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      124,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

        0,   62,   38,   23,   27,   25,    8,   14,   13,   11,
       12,   36,  294,  294,  294,  294,  294,  294,    0,  295,
        0,  297,    0,  298,    0,  296,    0,    0,    0,    4,
      300,    0,  301,   46,   63,   35,   64,   44,  292,  292,
      302,  302,  302,   69,  302,  302,  302,  302,  302,  193,
      302,   73,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,   86,  302,  302,
      302,  302,  302,  302,   96,  302,  302,  302,  227,  302,
      302,  302,  302,  302,  302,  302,  302,  232,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  242,

      302,  302,  120,  121,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  256,  137,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  160,  302,  302,  302,
      282,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  171,  302,  175,   49,   50,  294,  294,  294,  294,
      294,  294,  295,  297,  298,  296,    0,    0,  300,  301,
       65,   66,  292,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  190,  191,  302,  302,  195,   76,  302,  302,

      302,  302,   79,  302,  302,  302,  302,  302,  302,  302,
      302,  208,   84,   85,  302,  302,  302,  302,  302,  302,
      302,  302,  218,  302,  302,  302,  302,  302,  302,  302,
      302,   99,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  111,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  117,  302,  302,  119,  302,
      244,  302,  302,  302,  127,  302,  302,  302,  302,  302,
      302,  302,  251,  252,  302,  135,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  155,  272,  302,  156,  157,  161,  162,  302,  302,
      302,  276,  302,  302,  302,  302,  302,  284,  167,  168,
      302,  302,  302,  173,  287,  174,  177,  294,  294,  294,
      181,  294,  290,  289,  292,  302,  183,  302,  302,  302,
      302,  302,  302,   72,  302,  194,  302,   77,   78,  302,
      302,  198,  302,  200,  302,  302,  204,  207,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,   95,  302,  302,  302,  302,  224,
      302,   97,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  108,  109,  302,  302,  302,  302,  112,

      237,  238,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  130,  131,  302,  302,  253,  302,  134,  302,  302,
      302,  302,  140,  141,  142,  302,  302,  302,  302,  302,
      302,  302,  302,  147,  266,  302,  302,  302,  302,  302,
      302,  270,  302,  154,  302,  302,  302,  302,  302,  302,
      164,  302,  302,  278,  302,  280,  302,  302,  302,  169,
      170,  172,  302,  302,  294,  294,  176,  180,    0,  302,
       68,  187,   70,  188,  302,  189,  192,   74,   75,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  220,  221,  302,
      223,  302,  302,  302,  302,  302,  102,  103,  104,  106,
      302,  302,  230,  302,  231,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  115,  302,  116,  302,  302,  122,
      123,  125,  302,  246,  302,  302,  302,  302,  302,  302,
      302,  302,  133,  302,  302,  302,  302,  139,  257,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  146,  302,
      302,  267,  268,  302,  269,  302,  271,  302,  302,  302,
      302,  163,  165,  302,  279,  302,  302,  302,  302,  302,

      288,  294,  294,    0,  291,  302,  302,  302,  196,  197,
      302,  302,  202,  302,  302,  302,  302,   81,  302,   83,
       87,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,   94,  302,  222,  302,  226,
       98,  302,  302,  302,  302,  107,  110,  302,  302,  302,
      302,  302,  239,  302,  240,  241,  118,  302,  245,  302,
      128,  302,  302,  248,  302,  302,  302,  302,  302,  302,
      138,  302,  302,  302,  302,  261,  302,  302,  302,  302,
      148,  302,  150,  151,  152,  153,  302,  302,  302,  158,
      159,  277,  302,  302,  283,  302,  302,  294,  179,  302,

      302,  302,  302,  302,  199,  302,  203,  302,  302,   80,
       82,  210,  302,  302,  302,  212,  302,  302,  302,  302,
      302,  302,  302,  302,   93,  302,  302,  100,  101,  302,
      302,  302,  302,  235,  302,  302,  302,  243,  302,  302,
      247,  249,  302,  132,  254,  302,  136,  143,  144,  258,
      302,  302,  302,  145,  263,  264,  302,  302,  302,  302,
      275,  302,  166,  302,  286,  178,  182,  302,  185,  302,
       71,  302,  302,  302,  302,  302,  302,  302,   90,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  233,
      234,  236,  302,  302,  126,  129,  250,  302,  302,  302,

      302,  265,  149,  302,  302,  302,  302,  302,  302,  201,
      205,  206,  302,  302,  302,  302,  214,  302,  215,  302,
      302,   92,  219,  302,  302,  302,  113,  302,  302,  302,
      260,  302,  273,  302,  281,  285,  184,  302,  211,   88,
       89,  302,  302,  216,  217,  225,  228,  302,  114,  302,
      302,  302,  302,  186,  213,   91,  229,  255,  259,  262,
      302,  274,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    5,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,    1,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,    1,   25,
       26,   27,   28,    1,   29,   30,   29,   31,   32,   29,
       33,   34,   33,   33,   33,   33,   33,   33,   35,   33,
       33,   33,   36,   33,   33,   33,   33,   37,   33,   37,
        1,   38,    1,   39,   40,   41,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,   68,    1,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    1,    6,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        7,    7,    7,    1,    1,    1,    1,    8,    9,    9,
        9,    9,   10,   10,   10,   10,    9,    5,    1,   11,
        1,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,    9,   10,    9,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1079] =
    {   0,
        0,    0,    0,    0,   66,   67,   68,   69, 1324, 1325,
     1325,   75, 1325, 1325, 1297, 1325, 1314,   25, 1295,   68,
      106, 1305,   66,   67,   71,   84,  165, 1325,   75, 1293,
       78, 1325,    0,    0,   60, 1265,   58,   66,  116,   71,
      126,   83, 1271, 1266,  145, 1259,   82,   88,  148,   60,
      153,  172,  182,  114, 1259,  104,  199,   59,  135,  167,
     1325, 1325, 1294,    0, 1325, 1325,   35,  145,  129, 1286,
     1325,    0, 1255, 1264,  167, 1259, 1325, 1325, 1325,  170,
      244,  248,  218,  254,  249, 1258, 1257, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1302, 1325,

      222,  238,    0,  279,  227, 1325, 1279, 1325,  236,    0,
        0, 1325, 1325,    0, 1254, 1259,  190, 1257, 1241, 1239,
      219,  232, 1253, 1251, 1236, 1236,   89,  247, 1239,  222,
     1238,  154, 1233,    0, 1244, 1231,   81, 1244,  229,  249,
     1230, 1233, 1232, 1238,  259, 1230, 1231, 1226,  266, 1232,
     1222,  269,  268, 1235, 1234, 1223,  267, 1221,  259, 1223,
        0, 1214,  229, 1218, 1213,  278,  277, 1217, 1217,  291,
     1216, 1215, 1209,  295, 1225, 1208, 1209, 1216, 1221, 1209,
     1215,  283, 1203,  303,  290, 1205,  293, 1201,  295, 1198,
     1212, 1196, 1204,  187, 1211, 1202,  294, 1192, 1194, 1190,

     1221, 1220, 1325, 1325, 1325, 1325, 1325,    0, 1325, 1325,
     1325, 1325,    0, 1193,  130, 1184, 1198, 1198,  356,  341,
      365,  350,  362,    0,  377,  382, 1189, 1186, 1236, 1325,
      395,  408,  416, 1213, 1325, 1325, 1325, 1212,    0, 1182,
     1190, 1193, 1192,    0,  345, 1177, 1176, 1181,  315,    0,
     1188, 1179, 1182, 1181, 1171, 1181, 1164, 1179, 1162,  322,
     1175, 1160, 1159,  332,  236, 1172, 1171,  404, 1162, 1160,
      355, 1168, 1171, 1152,  348, 1167,  350, 1161,    0, 1153,
     1152, 1161, 1150, 1144, 1142, 1141, 1152, 1155, 1145, 1151,
     1156, 1147, 1148, 1136, 1150, 1143,  363, 1147, 1145,    0,

     1129, 1129,    0, 1138, 1134, 1129, 1133, 1142, 1123, 1136,
      370,  398, 1128, 1134, 1134, 1122, 1124,    0,    0, 1130,
     1129, 1112, 1117, 1116, 1129, 1117, 1106, 1122, 1112, 1113,
     1103, 1105, 1108, 1109, 1098, 1116, 1098,  407,  386, 1105,
     1109, 1104, 1095, 1098, 1107, 1097,  446, 1105,  404, 1100,
        0, 1088, 1087, 1102, 1085, 1100, 1092, 1090, 1097, 1095,
     1091,    0, 1080,    0, 1325, 1325, 1093, 1081, 1080, 1073,
     1070, 1072,  450,  452,    0,  461, 1086, 1085,  474,  487,
     1325, 1325, 1084, 1072, 1068, 1061, 1067, 1077, 1070, 1069,
     1063, 1066,    0, 1064, 1067, 1071,    0,  412, 1072, 1064,

     1055, 1062,    0, 1052,  430, 1053, 1051, 1050, 1047, 1066,
     1064,    0,    0,    0,  392, 1044,  394, 1050, 1048,  391,
      447, 1061,    0, 1041, 1057, 1041,  444, 1046, 1037, 1051,
      449,    0, 1035, 1036, 1052, 1026, 1037, 1032, 1042, 1030,
     1038, 1026, 1025, 1040,  452, 1044, 1037, 1029, 1037, 1030,
     1023, 1029, 1015, 1020, 1022,    0, 1029, 1012,    0, 1025,
        0, 1009,  476, 1016,    0, 1024, 1018, 1008, 1007, 1019,
     1018,  503,    0,  424, 1003, 1001, 1019, 1018, 1000,  998,
      997, 1001,  991, 1008,  988,  991, 1009, 1004,  988, 1002,
      994, 1000,  475,  995,  989,  988,  998,  982,  987,  993,

      992,    0,    0,  975,  459,  986,    0,    0,  980,  975,
      987,  987,  976,  968,  976,  972,  965,    0,  986,    0,
      465,  979,  980,    0,  973,    0,    0,  959,  958,  963,
        0,  970, 1325, 1325,  527,  957,    0,  957,  955,  960,
      968,  971,  966,    0,  964,    0,  513,    0,    0,  957,
      963,    0,  958,  948,  941,  950,  483,    0,  954,  950,
      943,  948,  940,  493,  944,  943,  941,  935,  950,  950,
      463,  935,  946,  493,  929,  929,  928,  943,  932,    0,
      946,    0,  941,  938,  933,  940,  922,  517,  934,  933,
      936,  916,  934,    0,    0,  929,  928,  492,  499,    0,

      916,    0,  917,  917,  924,  915,  909,  921,  918,  915,
      522,  903,  915,  917,  915,  912,  898,  908,  915,  897,
      911,    0,    0,  898,  896,  910,  905,    0,  900,  889,
      887,  892,    0,    0,  896,  903,  889,  882,  892,  882,
      885,  496,  894,    0,    0,  891,  895,  892,  887,  886,
      872,    0,  866,    0,  886,  882,  870,  873,  880,  881,
        0,  877,  878,    0,  877,  882,  862,  878,  863,    0,
        0,    0,  876,  862,  870,  873,    0,    0,  910,  873,
      872,    0,    0,    0,  850,    0,    0,    0,    0,  864,
      850,  853,  865,  845,  843,  845,  847,  854,  840,  858,

      853,  852,  837,  852,  851,  848,  831,  846,  829,  838,
      835,  499,  826,  843,  833,  833,  842,    0,    0,  823,
        0,  828,  832,  821,  823,  817,    0,    0,    0,    0,
      837,  823,    0,  822,    0,  815,  831,  826,  816,  814,
      827,  807,  811,  806,    0,  804,    0,  818,  809,    0,
        0,    0,  816,    0,  800,  814,  809,  797,  803,  795,
      794,  790,    0,  793,  794,  797,  804,    0,    0,  802,
      782,  786,  785,  792,  798,  799,  787,  795,    0,  774,
      780,    0,    0,  524,    0,  530,    0,  789,  779,  768,
      537,    0,    0,  754,    0,  736,  753,  740,  724,  714,

        0,  713,  705,  753, 1325,  695,  515,   73,    0,    0,
      160,  180,    0,  261,  254,  304,  311,    0,  355,    0,
        0,  352,  508,  500,  504,  507,  507,  514,  527,  520,
      512,  526,  527,  524,  529,    0,  523,    0,  535,    0,
        0,  523,  533,  537,  541,    0,    0,  538,  539,  518,
      530,  527,    0,  542,    0,    0,    0,  542,    0,  543,
        0,  527,  525,    0,  526,  547,  539,  549,  534,  551,
        0,  578,  540,  539,  552,  563,  559,  559,  545,  565,
        0,  566,    0,    0,    0,    0,  553,  566,  550,    0,
        0,    0,  562,  568,    0,  569,  570,  550,    0,  562,

      562,  572,  578,  577,    0,  567,    0,  561,  569,    0,
        0,    0,  575,  576,  585,    0,  581,  583,  582,  570,
      590,  574,  579,  588,    0,  583,  576,    0,    0,  588,
      596,  594,  580,    0,  596,  601,  582,    0,  586,  600,
        0,    0,  602,    0,    0,  602,    0,    0,    0,    0,
      607,  596,  587,    0,    0,    0,  599,  599,  592,  605,
        0,  595,    0,  611,    0,    0,    0,  604,    0,  598,
        0,  599,  604,  601,  608,  608,  604,  624,    0,  621,
      618,  615,  609,  627,  606,  607,  630,  620,  626,    0,
        0,    0,  623,  625,    0,    0,    0,  624,  627,  635,

      632,    0,    0,  622,  624,  636,  627,  644,  644,    0,
        0,    0,  641,  635,  645,  648,    0,  630,    0,  628,
      649,    0,    0,  647,  637,  643,    0,  653,  656,  648,
        0,  641,    0,  653,    0,    0,    0,  655,    0,    0,
        0,  659,  660,    0,    0,    0,    0,  647,    0,  662,
      643,  661,  655,    0,    0,    0,    0,    0,    0,    0,
      657,    0, 1325,  712,  723,  734,  737,  743,  754,  757,
      768,  779,  785,  795,  804,  810,  815,  826
    } ;

static yyconst flex_int16_t yy_def[1079] =
    {   0,
     1064, 1064, 1063,    3, 1065, 1065, 1066, 1066, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1067, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1068, 1069, 1063, 1070, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1063, 1063,
     1063, 1063, 1063, 1071, 1063, 1063, 1072, 1063,   21, 1063,
     1063, 1073, 1073, 1073, 1073, 1073, 1063, 1063, 1063,   21,
     1063, 1063, 1074, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1075, 1063,

     1063, 1063,   27, 1063, 1063, 1063, 1063, 1063, 1063, 1068,
     1069, 1063, 1063, 1076, 1076, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1071, 1063, 1063,
     1063, 1063, 1073, 1073, 1073, 1073, 1073, 1073, 1063, 1063,
     1063, 1063, 1074, 1077, 1063, 1063, 1063, 1063, 1075, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1076, 1076,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1063, 1063, 1073, 1073, 1073, 1073,
     1073, 1073, 1063, 1063, 1077, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1076, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1073, 1073, 1073, 1073,
     1073, 1073, 1063, 1063, 1076, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1073, 1073, 1073, 1073, 1078, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1073, 1073, 1078, 1063, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1073, 1073, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1073, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068,    0, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063
    } ;

static yyconst flex_int16_t yy_nxt[1395] =
    {   0,
       11,   12,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   11,   23,   24,   25,   11,   26,   27,
       27,   27,   27,   28,   29,   30,   31,   32,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   34,   35,   33,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   33,   47,   48,   49,   50,   51,   33,   52,   53,
       54,   55,   56,   57,   58,   33,   33,   59,   60,   62,
       62,   65,   65,   73,   66,   66,   68,   68,   78,   89,
       63,   63,   91,   74,   75,  112,   69,   94,   76,  210,
       92,   90,   93,   79,   95,  211,   96,   97,   98,  105,

      106,  116,   99,  108,  109,   67,   67,   80,   80,  100,
      117,  121,  118,  199,  200,  122,  132,  119,  161,  120,
      133,  162,  904,  151,  123,  268,  134,  124,  113,  153,
      255,  125,  140,  154,  256,   81,   82,  152,  141,   83,
       84,   85,  269,  155,  142,  190,   68,   68,   81,  191,
       82,  201,   86,  192,   83,  184,   69,  126,   87,  193,
      202,   84,  185,  186,  127,   85,  101,  101,  128,  129,
      135,  130,  187,  368,  131, 1063,   69,  204,  136,  188,
      137, 1063,  102,  369,  103,  103,  103,  103,  138,  156,
      139,  145,  146,  157,  163,  263,  104,  147,  148,  149,

      264,  158,  203,  159,  103,  205,  164,  905,  165,  160,
      104,  166,  216,  168,  167,  169, 1063,  170,  217,  223,
      223,  174, 1063,  101,  101,  175,  171,  176,  172,  906,
      177,  178,  173,   69,  206,  179,  355,  180,  181,  242,
      194,  356,  182,  183,  195,  219,  219,  196,  197,  221,
      221,  234,  235,  243,  198,  225,  225,  231,  231,  231,
      231,  237,  238,  220,  220,  247,  248,  222,  222,  222,
      222,  220,  307,  226,  226,  226,  260,  411,   81,   82,
      220,  226,   83,   84,  261,  271,  249,  308,  257,  272,
      226,   81,  250,   82,  232,  232,  412,   83,  233,  233,

      233,  233,  258,  273,   84,  279,  907,  274,  220,  908,
      220,  294,  291,  280,  299,  284,  292,  303,  226,  304,
      226,  285,  286,  293,  337,  287,  288,  311,  295,  313,
      300,  301,  317,  312,  346,  314,  326,  318,  319,  343,
      327,  338,  347,  320,  349,  340,  359,  321,  344,  328,
      341,  322,  360,  909,  361,  350,  329,  219,  219,  393,
      373,  373,  342,  223,  223,  910,  221,  221,  373,  374,
      374,  374,  374,  409,  394,  220,  220,  373,  225,  225,
      373,  404,  405,  220,  222,  222,  222,  222,  410,  374,
      387,  430,  220,  431,  388,  434,  226,  226,  226,  432,

      425,  376,  376,  376,  226,  373,  389,  373,  911,  376,
      426,  912,  435,  226,  379,  379,  379,  379,  376,  454,
      220,  376,  220,  467,  455,  468,  104,  233,  233,  233,
      233,  498,  570,  563,  379,  380,  380,  380,  380,  566,
      104,  226,  499,  226,  564,  469,  376,  415,  376,  571,
      416,  417,  567,  418,  470,  380,  495,  419,  471,  513,
      420,  514,  496,  421,  422,  507,  508,  626,  497,  373,
      373,  374,  374,  374,  374,  555,  548,  373,  549,  556,
      376,  376,  376,  627,  670,  671,  373,  509,  376,  373,
      583,  374,  572,  379,  379,  379,  379,  376,  578,  597,

      376,  510,  579,  573,  511,  104,  380,  380,  380,  380,
      598,  584,  711,  379,  373,  657,  373,  613,  712,  104,
      658,  614,  622,  623,  646,  376,  380,  376,  679,  679,
      696,  647,  688,  689,  703,  715,  728,  729,  737,  697,
      739,  750,  751,  883,  884,  777,  831,  624,  704,  885,
      886,  738,  716,  740,  778,  832,  890,  891,  901,  913,
      914,  902,  915,  916,  625,  917,  918,  903,  919,  920,
      921,  922,  923,  924,  925,  926,  927,  928,  929,  930,
      931,  932,  933,  934,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  944,  945,  946,  947,  948,  949,  950,

      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      971,  972,  973,  974,  975,  976,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
     1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
     1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
     1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,

     1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
     1061, 1062,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   72,   72,   72,  110,  110,
      900,  110,  110,  110,  111,  111,  805,  899,  111,  111,
      111,  111,  111,  111,  111,  114,  114,  114,  208,  208,
      208,  898,  897,  208,  208,  208,  208,  208,  208,  209,
      209,  209,  896,  209,  209,  209,  209,  209,  209,  209,
      213,  213,  895,  213,  213,  213,  224,  224,  894,  893,

      892,  224,  224,  224,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  239,  239,  889,  239,  239,
      239,  375,  375,  375,  888,  375,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  887,  882,  881,
      880,  879,  878,  877,  876,  875,  874,  873,  872,  871,
      870,  869,  868,  867,  866,  865,  864,  863,  862,  861,
      860,  859,  858,  857,  856,  855,  854,  853,  852,  851,
      850,  849,  848,  847,  846,  845,  844,  843,  842,  841,
      840,  839,  838,  837,  836,  835,  834,  833,  830,  829,
      828,  827,  826,  825,  824,  823,  822,  821,  820,  819,

      818,  817,  816,  815,  814,  813,  812,  811,  810,  809,
      808,  807,  806,  805,  803,  802,  801,  800,  799,  798,
      797,  796,  795,  794,  793,  792,  791,  790,  789,  788,
      787,  786,  785,  784,  783,  782,  781,  780,  779,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  767,  766,
      765,  764,  763,  762,  761,  760,  759,  758,  757,  756,
      755,  754,  753,  752,  749,  748,  747,  746,  745,  744,
      743,  742,  741,  736,  735,  734,  733,  732,  731,  730,
      727,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  714,  713,  710,  709,  708,  707,  706,  705,  702,

      701,  700,  699,  698,  695,  694,  693,  692,  691,  690,
      687,  686,  685,  684,  683,  682,  681,  680,  678,  677,
      676,  675,  674,  673,  672,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  656,  655,  654,  653,
      652,  651,  650,  649,  648,  645,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  621,  620,  619,  618,  617,  616,  615,
      612,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  599,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  582,  581,  580,  577,

      576,  575,  574,  569,  568,  565,  562,  561,  560,  559,
      558,  557,  554,  553,  552,  551,  550,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      512,  506,  505,  504,  503,  502,  501,  500,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  453,  452,  451,  450,  449,  448,  447,  446,

      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      433,  429,  428,  427,  424,  423,  414,  413,  408,  407,
      406,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      392,  391,  390,  386,  385,  384,  383,  382,  381,  230,
      378,  377,  372,  371,  370,  367,  366,  365,  364,  363,
      362,  358,  357,  354,  353,  352,  351,  348,  345,  339,
      336,  335,  334,  333,  332,  331,  330,  325,  324,  323,
      316,  315,  310,  309,  306,  305,  302,  298,  297,  296,
      290,  289,  283,  282,  281,  278,  277,  276,  275,  270,
      267,  266,  265,  262,  259,  254,  253,  252,  251,  246,

      245,  244,  241,  240,  236,  230,  228,  227,  218,  215,
      214,  212,  207,  189,  150,  144,  143,  115,  107,   88,
       77,   71,   70, 1063,    9, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063

    } ;

static yyconst flex_int16_t yy_chk[1395] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        6,    7,    8,   18,    7,    8,   12,   12,   20,   23,
        5,    6,   24,   18,   18,   35,   12,   25,   18,   67,
       24,   23,   24,   20,   25,   67,   25,   25,   26,   29,

       29,   37,   26,   31,   31,    7,    8,   21,   21,   26,
       37,   38,   37,   58,   58,   38,   40,   37,   50,   37,
       40,   50,  808,   47,   38,  137,   40,   38,   35,   48,
      127,   38,   42,   48,  127,   21,   21,   47,   42,   21,
       21,   21,  137,   48,   42,   56,   68,   68,   21,   56,
       21,   59,   21,   56,   21,   54,   68,   39,   21,   56,
       59,   21,   54,   54,   39,   21,   27,   27,   39,   39,
       41,   39,   54,  215,   39,   69,   27,   60,   41,   54,
       41,   69,   27,  215,   27,   27,   27,   27,   41,   49,
       41,   45,   45,   49,   51,  132,   27,   45,   45,   45,

      132,   49,   59,   49,   27,   60,   51,  811,   51,   49,
       27,   51,   75,   52,   51,   52,   80,   52,   75,   83,
       83,   53,   80,  101,  101,   53,   52,   53,   52,  812,
       53,   53,   52,  101,   60,   53,  194,   53,   53,  117,
       57,  194,   53,   53,   57,   81,   81,   57,   57,   82,
       82,  105,  105,  117,   57,   84,   84,  102,  102,  102,
      102,  109,  109,   81,   81,  121,  121,   82,   82,   82,
       82,   81,  163,   84,   84,   84,  130,  265,   85,   85,
       81,   84,   85,   85,  130,  139,  122,  163,  128,  139,
       84,   85,  122,   85,  104,  104,  265,   85,  104,  104,

      104,  104,  128,  140,   85,  145,  814,  140,   81,  815,
       81,  153,  152,  145,  157,  149,  152,  159,   84,  159,
       84,  149,  149,  152,  182,  149,  149,  166,  153,  167,
      157,  157,  170,  166,  187,  167,  174,  170,  170,  185,
      174,  182,  187,  170,  189,  184,  197,  170,  185,  174,
      184,  170,  197,  816,  197,  189,  174,  219,  219,  249,
      220,  220,  184,  223,  223,  817,  221,  221,  220,  222,
      222,  222,  222,  264,  249,  219,  219,  220,  225,  225,
      220,  260,  260,  219,  221,  221,  221,  221,  264,  222,
      245,  275,  219,  275,  245,  277,  225,  225,  225,  275,

      271,  226,  226,  226,  225,  220,  245,  220,  819,  226,
      271,  822,  277,  225,  231,  231,  231,  231,  226,  297,
      219,  226,  219,  311,  297,  311,  231,  232,  232,  232,
      232,  339,  420,  415,  231,  233,  233,  233,  233,  417,
      231,  225,  339,  225,  415,  312,  226,  268,  226,  420,
      268,  268,  417,  268,  312,  233,  338,  268,  312,  349,
      268,  349,  338,  268,  268,  347,  347,  474,  338,  373,
      373,  374,  374,  374,  374,  405,  398,  373,  398,  405,
      376,  376,  376,  474,  521,  521,  373,  347,  376,  373,
      431,  374,  421,  379,  379,  379,  379,  376,  427,  445,

      376,  347,  427,  421,  347,  379,  380,  380,  380,  380,
      445,  431,  571,  379,  373,  505,  373,  463,  571,  379,
      505,  463,  472,  472,  493,  376,  380,  376,  535,  535,
      557,  493,  547,  547,  564,  574,  588,  588,  598,  557,
      599,  611,  611,  784,  784,  642,  712,  472,  564,  786,
      786,  598,  574,  599,  642,  712,  791,  791,  807,  823,
      824,  807,  825,  826,  472,  827,  828,  807,  829,  830,
      831,  832,  833,  834,  835,  837,  839,  842,  843,  844,
      845,  848,  849,  850,  851,  852,  854,  858,  860,  862,
      863,  865,  866,  867,  868,  869,  870,  872,  872,  873,

      874,  875,  876,  877,  878,  879,  880,  882,  887,  888,
      889,  893,  894,  896,  897,  898,  900,  901,  902,  903,
      904,  906,  908,  909,  913,  914,  915,  917,  918,  919,
      920,  921,  922,  923,  924,  926,  927,  930,  931,  932,
      933,  935,  936,  937,  939,  940,  943,  946,  951,  952,
      953,  957,  958,  959,  960,  962,  964,  968,  970,  972,
      973,  974,  975,  976,  977,  978,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  993,  994,  998,  999,
     1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014,
     1015, 1016, 1018, 1020, 1021, 1024, 1025, 1026, 1028, 1029,

     1030, 1032, 1034, 1038, 1042, 1043, 1048, 1050, 1051, 1052,
     1053, 1061, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1067, 1067, 1067, 1068, 1068,
      806, 1068, 1068, 1068, 1069, 1069,  804,  803, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1070, 1070, 1070, 1071, 1071,
     1071,  802,  800, 1071, 1071, 1071, 1071, 1071, 1071, 1072,
     1072, 1072,  799, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1073, 1073,  798, 1073, 1073, 1073, 1074, 1074,  797,  796,

      794, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1076, 1076,  790, 1076, 1076,
     1076, 1077, 1077, 1077,  789, 1077, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078,  788,  781,  780,
      778,  777,  776,  775,  774,  773,  772,  771,  770,  767,
      766,  765,  764,  762,  761,  760,  759,  758,  757,  756,
      755,  753,  749,  748,  746,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  734,  732,  731,  726,  725,  724,
      723,  722,  720,  717,  716,  715,  714,  713,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,

      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
      685,  681,  680,  679,  676,  675,  674,  673,  669,  668,
      667,  666,  665,  663,  662,  660,  659,  658,  657,  656,
      655,  653,  651,  650,  649,  648,  647,  646,  643,  641,
      640,  639,  638,  637,  636,  635,  632,  631,  630,  629,
      627,  626,  625,  624,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  610,  609,  608,  607,  606,  605,
      604,  603,  601,  597,  596,  593,  592,  591,  590,  589,
      587,  586,  585,  584,  583,  581,  579,  578,  577,  576,
      575,  573,  572,  570,  569,  568,  567,  566,  565,  563,

      562,  561,  560,  559,  556,  555,  554,  553,  551,  550,
      545,  543,  542,  541,  540,  539,  538,  536,  532,  530,
      529,  528,  525,  523,  522,  519,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  506,  504,  501,  500,  499,
      498,  497,  496,  495,  494,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  471,  470,  469,  468,  467,  466,  464,
      462,  460,  458,  457,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  430,  429,  428,  426,

      425,  424,  422,  419,  418,  416,  411,  410,  409,  408,
      407,  406,  404,  402,  401,  400,  399,  396,  395,  394,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      378,  377,  372,  371,  370,  369,  368,  367,  363,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  350,
      348,  346,  345,  344,  343,  342,  341,  340,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  317,  316,  315,  314,
      313,  310,  309,  308,  307,  306,  305,  304,  302,  301,
      299,  298,  296,  295,  294,  293,  292,  291,  290,  289,

      288,  287,  286,  285,  284,  283,  282,  281,  280,  278,
      276,  274,  273,  272,  270,  269,  267,  266,  263,  262,
      261,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      248,  247,  246,  243,  242,  241,  240,  238,  234,  229,
      228,  227,  218,  217,  216,  214,  202,  201,  200,  199,
      198,  196,  195,  193,  192,  191,  190,  188,  186,  183,
      181,  180,  179,  178,  177,  176,  175,  173,  172,  171,
      169,  168,  165,  164,  162,  160,  158,  156,  155,  154,
      151,  150,  148,  147,  146,  144,  143,  142,  141,  138,
      136,  135,  133,  131,  129,  126,  125,  124,  123,  120,

      119,  118,  116,  115,  107,   99,   87,   86,   76,   74,
       73,   70,   63,   55,   46,   44,   43,   36,   30,   22,
       19,   17,   15,    9, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yyverilog_flex_debug;
int yyverilog_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yyverilogtext;
#line 1 "scanner.l"
#define YY_NO_INPUT 1
#line 5 "scanner.l"
#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <cassert>
#include <cstdlib>
#include <cstring>

#include <util/expr.h>

#define PARSER verilog_parser
#define YYSTYPE unsigned

#include "verilog_parser.h"
#include "verilog_y.tab.h"

int yyverilogerror(const char *error);

static void line_directive()
{
  char *tptr=yyverilogtext;

  // skip directive
  while(*tptr!=' ' && *tptr!='\t' && *tptr!=0) tptr++;

  // skip whitespace
  while(*tptr==' ' || *tptr=='\t') tptr++;

  PARSER.set_line_no(atoi(tptr)-1);

  // skip number

  while(isdigit(*tptr)) tptr++;

  // skip whitespace
  while(*tptr==' ' || *tptr=='\t') tptr++;

  if(*tptr=='"') // filename?
  {
    tptr++;

    std::string filename;
    while(*tptr!=0 && *tptr!='"')
      filename+=*(tptr++);

    PARSER.set_file(filename);
  }
}

static void preprocessor()
{

}

#define IDENTIFIER { newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_CHARSTR; }
#define SYSTEM_VERILOG_KEYWORD(x) \
  { if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG) \
      return x; \
    else \
      IDENTIFIER; \
  }
#define VIS_VERILOG_KEYWORD(x) \
  { if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG || \
       PARSER.mode==verilog_parsert::VIS_VERILOG) \
      return x; \
    else \
      IDENTIFIER; \
  }



#line 105 "scanner.l"
void verilog_scanner_init()
 {
  YY_FLUSH_BUFFER;
  BEGIN 0; // INITIAL
 }
#line 1220 "verilog_lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define COMMENT 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yyveriloglex_destroy (void );

int yyverilogget_debug (void );

void yyverilogset_debug (int debug_flag  );

YY_EXTRA_TYPE yyverilogget_extra (void );

void yyverilogset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyverilogget_in (void );

void yyverilogset_in  (FILE * in_str  );

FILE *yyverilogget_out (void );

void yyverilogset_out  (FILE * out_str  );

int yyverilogget_leng (void );

char *yyverilogget_text (void );

int yyverilogget_lineno (void );

void yyverilogset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yyverilogwrap (void );
#else
extern int yyverilogwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yyverilogtext, yyverilogleng, 1, yyverilogout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyverilogin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyverilogin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyverilogin))==0 && ferror(yyverilogin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyverilogin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yyveriloglex (void);

#define YY_DECL int yyveriloglex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yyverilogtext and yyverilogleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 112 "scanner.l"


#line 1411 "verilog_lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyverilogin )
			yyverilogin = stdin;

		if ( ! yyverilogout )
			yyverilogout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyverilogensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yyverilog_create_buffer(yyverilogin,YY_BUF_SIZE );
		}

		yyverilog_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yyverilogtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1064 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1325 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 114 "scanner.l"
{ BEGIN GRAMMAR;
		  yyless(0);		/* start again with this character */
		  //yy_current_buffer->yy_at_bol = 1; /* at beginning of line */
		  switch(PARSER.grammar)
		   {
                   case verilog_parsert::EXPRESSION: return TOK_PARSE_EXPRESSION;
                   case verilog_parsert::TYPE: return TOK_PARSE_TYPE;
                   case verilog_parsert::LANGUAGE: return TOK_PARSE_LANGUAGE;
		   default: assert(0);
		   }
		}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 126 "scanner.l"
{ continue; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 127 "scanner.l"
{ continue; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 128 "scanner.l"
{ continue; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 129 "scanner.l"
{ BEGIN COMMENT; continue; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 130 "scanner.l"
{ continue; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 131 "scanner.l"
{ continue; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 132 "scanner.l"
{ BEGIN GRAMMAR; continue; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 134 "scanner.l"
{ BEGIN(STRING);	/* begin string literal state */
		  newstack(yyveriloglval);
                  verilog_parser.string_literal.clear();
		 }
	YY_BREAK

case 10:
YY_RULE_SETUP
#line 140 "scanner.l"
{ BEGIN(GRAMMAR);	/* end string state, back GRAMMAR */
                  stack(yyveriloglval).id(verilog_parser.string_literal);
		  return TOK_QSTRING;
		}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 145 "scanner.l"
{ yyverilogerror("Unterminated string constant");
		  return TOK_SCANNER_ERROR;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 149 "scanner.l"
{ verilog_parser.string_literal += '\n'; }	/* NL (0x0a) */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 150 "scanner.l"
{ verilog_parser.string_literal += '\t'; }	/* HT (0x09) */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "scanner.l"
{ verilog_parser.string_literal += yyverilogtext[1]; } /* ignore the backslash */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 152 "scanner.l"
{ verilog_parser.string_literal += &yyverilogtext[0]; } /* standard stuff */
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 154 "scanner.l"
{ yyverilogerror("Unterminated string constant");
		  return TOK_SCANNER_ERROR;
		}
	YY_BREAK

/*
	 * Symbols.
	 */
/* Generic. */
case 16:
YY_RULE_SETUP
#line 165 "scanner.l"
{ return TOK_PARENASTERIC; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 166 "scanner.l"
{ return TOK_ASTERICPAREN; }
	YY_BREAK
/* Unary. */
case 18:
YY_RULE_SETUP
#line 170 "scanner.l"
{ return TOK_PLUS; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 171 "scanner.l"
{ return TOK_MINUS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 172 "scanner.l"
{ return TOK_EXCLAM; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 173 "scanner.l"
{ return TOK_TILDE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 174 "scanner.l"
{ return TOK_AMPER; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 175 "scanner.l"
{ return TOK_TILDEAMPER; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 176 "scanner.l"
{ return TOK_VERTBAR; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 177 "scanner.l"
{ return TOK_TILDEVERTBAR; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 178 "scanner.l"
{ return TOK_CARET; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 179 "scanner.l"
{ return TOK_TILDECARET; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 180 "scanner.l"
{ return TOK_CARETTILDE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 181 "scanner.l"
{ return TOK_MINUSGREATER; }
	YY_BREAK
/* Binary. */
case 30:
YY_RULE_SETUP
#line 185 "scanner.l"
{ return TOK_ASTERIC; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 186 "scanner.l"
{ return TOK_SLASH; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 187 "scanner.l"
{ return TOK_PERCENT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 188 "scanner.l"
{ return TOK_EQUALEQUAL; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 189 "scanner.l"
{ return TOK_EXCLAMEQUAL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 190 "scanner.l"
{ return TOK_EQUALEQUALEQUAL; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 191 "scanner.l"
{ return TOK_EXCLAMEQUALEQUAL; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 192 "scanner.l"
{ return TOK_AMPERAMPER; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 193 "scanner.l"
{ return TOK_VERTBARVERTBAR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 194 "scanner.l"
{ return TOK_LESS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 195 "scanner.l"
{ return TOK_LESSEQUAL; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 196 "scanner.l"
{ return TOK_GREATER; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 197 "scanner.l"
{ return TOK_GREATEREQUAL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 198 "scanner.l"
{ return TOK_GREATERGREATER; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 199 "scanner.l"
{ return TOK_GREATERGREATERGREATER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 200 "scanner.l"
{ return TOK_LESSLESS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 201 "scanner.l"
{ return TOK_LESSLESSLESS; }
	YY_BREAK
/* Trinary */
case 47:
YY_RULE_SETUP
#line 205 "scanner.l"
{ return TOK_QUESTION; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 206 "scanner.l"
{ return TOK_COLON; }
	YY_BREAK
/* System Verilog */
case 49:
YY_RULE_SETUP
#line 209 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_VERTBARMINUSGREATER;
                          else
                            yyverilogerror("|-> is a System Verilog operator");
                        }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 214 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_VERTBAREQUALGREATER;
                          else
                            yyverilogerror("|=> is a System Verilog operator");
                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 219 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_PLUSPLUS;
                          else
                            yyverilogerror("++ is a System Verilog operator");
                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 224 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_MINUSMINUS;
                          else
                            yyverilogerror("-- is a System Verilog operator");
                        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 229 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_PLUSEQUAL;
                          else
                            yyverilogerror("+= is a System Verilog operator");
                        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 234 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_PLUSCOLON;
                          else
                            yyverilogerror("+: is a System Verilog operator");
                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 239 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_MINUSCOLON;
                          else
                            yyverilogerror("-: is a System Verilog operator");
                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 244 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_MINUSEQUAL;
                          else
                            yyverilogerror("-= is a System Verilog operator");
                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 249 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_ASTERICEQUAL;
                          else
                            yyverilogerror("*= is a System Verilog operator");
                        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 254 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_SLASHEQUAL;
                          else
                            yyverilogerror("+= is a System Verilog operator");
                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 259 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_PERCENTEQUAL;
                          else
                            yyverilogerror("%= is a System Verilog operator");
                        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 264 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_AMPEREQUAL;
                          else
                            yyverilogerror("&= is a System Verilog operator");
                        }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 269 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_CARETEQUAL;
                          else
                            yyverilogerror("^= is a System Verilog operator");
                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 274 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_VERTBAREQUAL;
                          else
                            yyverilogerror("|= is a System Verilog operator");
                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 279 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_LESSLESSEQUAL;
                          else
                            yyverilogerror("<<= is a System Verilog operator");
                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 284 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_GREATERGREATEREQUAL;
                          else
                            yyverilogerror(">>= is a System Verilog operator");
                        }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 289 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_LESSLESSLESSEQUAL;
                          else
                            yyverilogerror("<<<= is a System Verilog operator");
                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 294 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_GREATERGREATERGREATEREQUAL;
                          else
                            yyverilogerror(">>>= is a System Verilog operator");
                        }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 299 "scanner.l"
{ if(PARSER.mode==verilog_parsert::SYSTEM_VERILOG)
                            return TOK_HASHHASH;
                          else
                            yyverilogerror("## is a System Verilog operator");
                        }
	YY_BREAK
/* Verilog Keywords */
case 68:
YY_RULE_SETUP
#line 307 "scanner.l"
{ return TOK_ALWAYS; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 308 "scanner.l"
{ return TOK_AND; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 309 "scanner.l"
{ return TOK_ASSIGN; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 310 "scanner.l"
{ return TOK_AUTOMATIC; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 311 "scanner.l"
{ return TOK_BEGIN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 312 "scanner.l"
{ return TOK_BUF; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 313 "scanner.l"
{ return TOK_BUFIF0; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 314 "scanner.l"
{ return TOK_BUFIF1; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 315 "scanner.l"
{ return TOK_CASE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 316 "scanner.l"
{ return TOK_CASEX; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 317 "scanner.l"
{ return TOK_CASEZ; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 318 "scanner.l"
{ return TOK_CMOS; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 319 "scanner.l"
{ return TOK_DEASSIGN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 320 "scanner.l"
{ return TOK_DEFAULT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 321 "scanner.l"
{ return TOK_DEFPARAM; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 322 "scanner.l"
{ return TOK_DISABLE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 323 "scanner.l"
{ return TOK_EDGE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 324 "scanner.l"
{ return TOK_ELSE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 325 "scanner.l"
{ return TOK_END; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 326 "scanner.l"
{ return TOK_ENDCASE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 327 "scanner.l"
{ return TOK_ENDFUNCTION; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 328 "scanner.l"
{ return TOK_ENDGENERATE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 329 "scanner.l"
{ return TOK_ENDMODULE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 330 "scanner.l"
{ return TOK_ENDPRIMITIVE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 331 "scanner.l"
{ return TOK_ENDSPECIFY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 332 "scanner.l"
{ return TOK_ENDTABLE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 333 "scanner.l"
{ return TOK_ENDTASK; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 334 "scanner.l"
{ return TOK_EVENT; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 335 "scanner.l"
{ return TOK_FOR; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 336 "scanner.l"
{ return TOK_FORCE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 337 "scanner.l"
{ return TOK_FOREVER; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 338 "scanner.l"
{ return TOK_FORK; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 339 "scanner.l"
{ return TOK_FUNCTION; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 340 "scanner.l"
{ return TOK_GENERATE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 341 "scanner.l"
{ return TOK_GENVAR; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 342 "scanner.l"
{ return TOK_HIGHZ0; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 343 "scanner.l"
{ return TOK_HIGHZ1; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 344 "scanner.l"
{ return TOK_IF; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 345 "scanner.l"
{ return TOK_IFNONE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 346 "scanner.l"
{ return TOK_INITIAL; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 347 "scanner.l"
{ return TOK_INOUT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 348 "scanner.l"
{ return TOK_INPUT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 349 "scanner.l"
{ return TOK_INTEGER; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 350 "scanner.l"
{ return TOK_JOIN; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 351 "scanner.l"
{ return TOK_LARGE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 352 "scanner.l"
{ return TOK_LOCALPARAM; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 353 "scanner.l"
{ return TOK_MACROMODULE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 354 "scanner.l"
{ return TOK_MEDIUM; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 355 "scanner.l"
{ return TOK_MODULE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 356 "scanner.l"
{ return TOK_NAND; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 357 "scanner.l"
{ return TOK_NEGEDGE; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 358 "scanner.l"
{ return TOK_NMOS; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 359 "scanner.l"
{ return TOK_NOR; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 360 "scanner.l"
{ return TOK_NOT; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 361 "scanner.l"
{ return TOK_NOTIF0; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 362 "scanner.l"
{ return TOK_NOTIF1; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 363 "scanner.l"
{ return TOK_OR; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 364 "scanner.l"
{ return TOK_OUTPUT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 365 "scanner.l"
{ return TOK_PARAMETER; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 366 "scanner.l"
{ return TOK_PMOS; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 367 "scanner.l"
{ return TOK_POSEDGE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 368 "scanner.l"
{ return TOK_PRIMITIVE; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 369 "scanner.l"
{ return TOK_PULL0; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 370 "scanner.l"
{ return TOK_PULL1; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 371 "scanner.l"
{ return TOK_PULLDOWN; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 372 "scanner.l"
{ return TOK_PULLUP; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 373 "scanner.l"
{ return TOK_RCMOS; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 374 "scanner.l"
{ return TOK_REAL; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 375 "scanner.l"
{ return TOK_REALTIME; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 376 "scanner.l"
{ return TOK_REG; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 377 "scanner.l"
{ return TOK_RELEASE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 378 "scanner.l"
{ return TOK_REPEAT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 379 "scanner.l"
{ return TOK_RNMOS; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 380 "scanner.l"
{ return TOK_RPMOS; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 381 "scanner.l"
{ return TOK_RTRAN; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 382 "scanner.l"
{ return TOK_RTRANIF0; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 383 "scanner.l"
{ return TOK_RTRANIF1; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 384 "scanner.l"
{ return TOK_SCALARED; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 385 "scanner.l"
{ return TOK_SIGNED; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 386 "scanner.l"
{ return TOK_SMALL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 387 "scanner.l"
{ return TOK_SPECIFY; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 388 "scanner.l"
{ return TOK_SPECPARAM; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 389 "scanner.l"
{ return TOK_STRONG0; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 390 "scanner.l"
{ return TOK_STRONG1; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 391 "scanner.l"
{ return TOK_SUPPLY0; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 392 "scanner.l"
{ return TOK_SUPPLY1; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 393 "scanner.l"
{ return TOK_TABLE; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 394 "scanner.l"
{ return TOK_TASK; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 395 "scanner.l"
{ return TOK_TIME; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 396 "scanner.l"
{ return TOK_TRAN; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 397 "scanner.l"
{ return TOK_TRANIF0; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 398 "scanner.l"
{ return TOK_TRANIF1; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 399 "scanner.l"
{ return TOK_TRI; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 400 "scanner.l"
{ return TOK_TRI0; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 401 "scanner.l"
{ return TOK_TRI1; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 402 "scanner.l"
{ return TOK_TRIAND; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 403 "scanner.l"
{ return TOK_TRIOR; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 404 "scanner.l"
{ return TOK_TRIREG; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 405 "scanner.l"
{ return TOK_VECTORED; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 406 "scanner.l"
{ return TOK_WAIT; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 407 "scanner.l"
{ return TOK_WAND; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 408 "scanner.l"
{ return TOK_WEAK0; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 409 "scanner.l"
{ return TOK_WEAK1; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 410 "scanner.l"
{ return TOK_WOR; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 411 "scanner.l"
{ return TOK_WHILE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 412 "scanner.l"
{ return TOK_WIRE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 413 "scanner.l"
{ return TOK_XNOR; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 414 "scanner.l"
{ return TOK_XOR; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 415 "scanner.l"
{ return TOK_SETUP; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 416 "scanner.l"
{ return TOK_HOLD; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 417 "scanner.l"
{ return TOK_RECOVERY; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 418 "scanner.l"
{ return TOK_REMOVAL; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 419 "scanner.l"
{ return TOK_WIDTH; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 420 "scanner.l"
{ return TOK_SKEW; }
	YY_BREAK
/* System Verilog Keywords */
case 182:
YY_RULE_SETUP
#line 423 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ACCEPT_ON); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 424 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ALIAS); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 425 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ALWAYS_COMB); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 426 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ALWAYS_FF); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 427 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ALWAYS_LATCH); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 428 "scanner.l"
{ VIS_VERILOG_KEYWORD(TOK_ASSERT); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 429 "scanner.l"
{ VIS_VERILOG_KEYWORD(TOK_ASSUME); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 430 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_BEFORE); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 431 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_BIND); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 432 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_BINS); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 433 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_BINSOF); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 434 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_BIT); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 435 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_BREAK); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 436 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_BYTE); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 437 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CHANDLE); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 438 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CHECKER); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 439 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CLASS); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 440 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CLOCKING); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 441 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CONST); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 442 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CONSTRAINT); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 443 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CONTEXT); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 444 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CONTINUE); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 445 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_COVER); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 446 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_COVERGROUP); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 447 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_COVERPOINT); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 448 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_CROSS); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 449 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_DIST); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 450 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_DO); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 451 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDCLASS); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 452 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDCLOCKING); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 453 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDGROUP); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 454 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDINTERFACE); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 455 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDPACKAGE); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 456 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDPROGRAM); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 457 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDPROPERTY); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 458 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ENDSEQUENCE); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 459 "scanner.l"
{ VIS_VERILOG_KEYWORD(TOK_ENUM); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 460 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_EVENTUALLY); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 461 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_EXPECT); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 462 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_EXPORT); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 463 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_EXTENDS); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 464 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_EXTERN); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 465 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_FINAL); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 466 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_FIRST_MATCH); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 467 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_FOREACH); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 468 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_IFF); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 469 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_IGNORE_BINS); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 470 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_ILLEGAL_BINS); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 471 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_IMPORT); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 472 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_INSIDE); }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 473 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_INT); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 474 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_INTERFACE); }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 475 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_INTERSECT); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 476 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_JOIN_ANY); }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 477 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_JOIN_NONE); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 478 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_LOCAL); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 479 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_LOGIC); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 480 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_LONGINT); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 481 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_MATCHES); }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 482 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_MODPORT); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 483 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_NEW); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 484 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_NEXTTIME); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 485 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_NULL); }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 486 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_PACKAGE); }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 487 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_PACKED); }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 488 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_PRIORITY); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 489 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_PROGRAM); }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 490 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_PROPERTY); }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 491 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_PROTECTED); }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 492 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_PURE); }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 493 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_RAND); }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 494 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_RANDC); }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 495 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_RANDCASE); }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 496 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_RANDSEQUENCE); }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 497 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_REF); }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 498 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_RETURN); }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 499 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_S_ALWAYS); }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 500 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_S_EVENTUALLY); }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 501 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_S_NEXTTIME); }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 502 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_S_UNTIL); }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 503 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_S_UNTIL_WITH); }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 504 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_SEQUENCE); }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 505 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_SHORTINT); }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 506 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_SHORTREAL); }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 507 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_SOLVE); }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 508 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_STATIC); }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 509 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_STRING); }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 510 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_STRUCT); }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 511 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_SUPER); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 512 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_TAGGED); }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 513 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_THIS); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 514 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_THROUGHOUT); }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 515 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_TIMEPRECISION); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 516 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_TIMEUNIT); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 517 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_TYPE); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 518 "scanner.l"
{ VIS_VERILOG_KEYWORD(TOK_TYPEDEF); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 519 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_UNION); }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 520 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_UNIQUE); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 521 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_UNTIL); }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 522 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_UNTIL_WITH); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 523 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_VAR); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 524 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_VIRTUAL); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 525 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_VOID); }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 526 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_WAIT_ORDER); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 527 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_WILDCARD); }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 528 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_WITH); }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 529 "scanner.l"
{ SYSTEM_VERILOG_KEYWORD(TOK_WITHIN); }
	YY_BREAK
/*
	 * Others.
	 */
case 289:
YY_RULE_SETUP
#line 535 "scanner.l"
{ /* get_line_number(); */ continue; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 536 "scanner.l"
{ /* get_file_name(); */ continue; }
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 537 "scanner.l"
{ line_directive(); continue; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 538 "scanner.l"
{ preprocessor(); continue; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 539 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 541 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_SYSIDENT; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 542 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_NUMBER; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 543 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_NUMBER; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 544 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_NUMBER; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 545 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_NUMBER; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 546 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_NUMBER; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 547 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_NUMBER; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 548 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext); return TOK_NUMBER; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 549 "scanner.l"
{ IDENTIFIER; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 550 "scanner.l"
{ newstack(yyveriloglval); stack(yyveriloglval).id(yyverilogtext+1); return TOK_CHARSTR; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 551 "scanner.l"
{ return yyverilogtext[0]; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 553 "scanner.l"
ECHO;
	YY_BREAK
#line 3140 "verilog_lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyverilogin at a new source and called
			 * yyveriloglex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyverilogin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yyverilogwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yyverilogtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yyveriloglex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyverilogrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyverilogrestart(yyverilogin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyverilogrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1064 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1064 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1063);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyverilogrestart(yyverilogin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yyverilogwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yyverilogtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyverilogrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyverilogensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yyverilog_create_buffer(yyverilogin,YY_BUF_SIZE );
	}

	yyverilog_init_buffer(YY_CURRENT_BUFFER,input_file );
	yyverilog_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyverilog_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yyverilogpop_buffer_state();
	 *		yyverilogpush_buffer_state(new_buffer);
     */
	yyverilogensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yyverilog_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yyverilogwrap()) processing, but the only time this flag
	 * is looked at is after yyverilogwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yyverilog_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyverilogin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyverilog_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyverilogalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyverilog_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyverilogalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyverilog_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yyverilog_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yyverilog_create_buffer()
 * 
 */
    void yyverilog_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyverilogfree((void *) b->yy_ch_buf  );

	yyverilogfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyverilogrestart() or at EOF.
 */
    static void yyverilog_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yyverilog_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yyverilog_init_buffer was _probably_
     * called from yyverilogrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyverilog_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yyverilog_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyverilogpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyverilogensure_buffer_stack();

	/* This block is copied from yyverilog_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yyverilog_switch_to_buffer. */
	yyverilog_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyverilogpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yyverilog_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yyverilog_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyverilogensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyverilogalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyverilogensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyverilogrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyverilogensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yyverilog_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyverilogalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyverilog_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yyverilog_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yyveriloglex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yyverilog_scan_bytes() instead.
 */
YY_BUFFER_STATE yyverilog_scan_string (yyconst char * yystr )
{
    
	return yyverilog_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yyveriloglex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yyverilog_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyverilogalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyverilog_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yyverilog_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yyverilog_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyverilogtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yyverilogtext[yyverilogleng] = (yy_hold_char); \
		(yy_c_buf_p) = yyverilogtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyverilogleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyverilogget_lineno  (void)
{
        
    return yyveriloglineno;
}

/** Get the input stream.
 * 
 */
FILE *yyverilogget_in  (void)
{
        return yyverilogin;
}

/** Get the output stream.
 * 
 */
FILE *yyverilogget_out  (void)
{
        return yyverilogout;
}

/** Get the length of the current token.
 * 
 */
int yyverilogget_leng  (void)
{
        return yyverilogleng;
}

/** Get the current token.
 * 
 */

char *yyverilogget_text  (void)
{
        return yyverilogtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyverilogset_lineno (int  line_number )
{
    
    yyveriloglineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yyverilog_switch_to_buffer
 */
void yyverilogset_in (FILE *  in_str )
{
        yyverilogin = in_str ;
}

void yyverilogset_out (FILE *  out_str )
{
        yyverilogout = out_str ;
}

int yyverilogget_debug  (void)
{
        return yyverilog_flex_debug;
}

void yyverilogset_debug (int  bdebug )
{
        yyverilog_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yyveriloglex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyverilogin = stdin;
    yyverilogout = stdout;
#else
    yyverilogin = (FILE *) 0;
    yyverilogout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yyveriloglex_init()
     */
    return 0;
}

/* yyveriloglex_destroy is for both reentrant and non-reentrant scanners. */
int yyveriloglex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yyverilog_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yyverilogpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyverilogfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yyveriloglex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyverilogalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyverilogrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyverilogfree (void * ptr )
{
	free( (char *) ptr );	/* see yyverilogrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 553 "scanner.l"



int yyverilogwrap() { return 1; }

