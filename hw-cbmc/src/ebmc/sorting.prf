(|carry_and_swap|)
(|sorting_network|
 (|lesseqp_TCC1| "" (USE "order_exists")
  (("" (SKOLEM-TYPEPRED) (("" (INST?) NIL NIL)) NIL)) NIL)
 (|ordered_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|ordered_TCC2| "" (SUBTYPE-TCC) NIL NIL)
 (|greatest_exists| "" (INDUCT "n")
  (("1" (SKOLEM-TYPEPRED) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
   ("3" (SKOLEM-TYPEPRED)
    (("3" (FLATTEN)
      (("3" (SKOLEM-TYPEPRED)
        (("3" (CASE "j!1=0")
          (("1" (ASSERT)
            (("1" (DELETE -3)
              (("1" (REPLACE -1)
                (("1" (INST + "0")
                  (("1" (SKOLEM-TYPEPRED)
                    (("1" (ASSERT)
                      (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (INST - "LAMBDA (i: below(j!1)): s!1(i)")
              (("2" (SKOLEM-TYPEPRED)
                (("2" (CASE "s!1(j!1)<=s!1(i!1)")
                  (("1" (INST + "i!1")
                    (("1" (SKOLEM-TYPEPRED)
                      (("1" (INST - "j!2")
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (INST + "j!1")
                    (("2" (SKOLEM-TYPEPRED)
                      (("2" (CASE "j!2=j!1")
                        (("1" (TYPEPRED "<=") (("1" (GRIND) NIL NIL)) NIL)
                         ("2" (INST - "j!2")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "<=")
                              (("1" (EXPAND "total_order?")
                                (("1" (EXPAND "dichotomous?")
                                  (("1" (FLATTEN)
                                    (("1" (INST - "s!1(j!2)" "s!1(j!1)")
                                      (("1"
                                        (ASSERT)
                                        (("1"
                                          (EXPAND "partial_order?")
                                          (("1"
                                            (EXPAND "preorder?")
                                            (("1"
                                              (EXPAND "transitive?")
                                              (("1"
                                                (FLATTEN)
                                                (("1"
                                                  (INST
                                                   -
                                                   "s!1(j!1)"
                                                   "s!1(j!2)"
                                                   "s!1(i!1)")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|greatest_TCC1| "" (USE "greatest_exists")
  (("" (SKOLEM-TYPEPRED)
    (("" (INST?)
      (("" (INST?)
        (("" (SKOLEM-TYPEPRED)
          (("" (ASSERT)
            (("" (EXPAND "nonempty?")
              (("" (EXPAND "empty?")
                (("" (EXPAND "member") (("" (INST -4 "i!1") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|permutation_commutative| "" (SKOLEM-TYPEPRED)
  (("" (EXPAND "permutation")
    (("" (FLATTEN)
      (("" (SKOLEM-TYPEPRED)
        (("" (INST + "inverse(p!1)")
          (("1" (SKOLEM-TYPEPRED)
            (("1" (INST - "inverse(p!1)(i!1)")
              (("1" (ASSERT)
                (("1" (REPLACE -4)
                  (("1" (CASE "i!1=p!1(inverse(p!1)(i!1))")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (DELETE 2)
                      (("2"
                        (LEMMA
                         "comp_inverse_right_surj[below(n!1), below(n!1)]")
                        (("2" (INST - "i!1" "p!1")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (ASSERT)
                            (("2" (EXPAND "bijective?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (INST + "0") NIL NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST + "0") NIL NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (USE "bij_inv_is_bij[below(n!1), below(n!1)]")
              (("1" (ASSERT) NIL NIL) ("2" (INST + "0") NIL NIL)) NIL))
            NIL)
           ("3" (INST + "0") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|permutation_of_permutation| "" (SKOLEM-TYPEPRED)
  (("" (FLATTEN)
    (("" (EXPAND "permutation")
      (("" (SKOLEM-TYPEPRED)
        (("" (SKOLEM-TYPEPRED)
          (("" (INST + "p!2 o p!1")
            (("1" (DELETE -1 -2)
              (("1" (EXPAND "o") (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (DELETE -4 -5)
              (("2" (EXPAND "o")
                (("2" (EXPAND "bijective?")
                  (("2" (FLATTEN)
                    (("2" (EXPAND "injective?")
                      (("2" (EXPAND "surjective?")
                        (("2" (SPLIT +)
                          (("1" (SKOLEM-TYPEPRED)
                            (("1" (FLATTEN)
                              (("1" (DELETE -5 -7)
                                (("1" (INST - "p!1(x1!1)" "p!1(x2!1)")
                                  (("1" (ASSERT)
                                    (("1" (INST - "x1!1" "x2!1")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOLEM-TYPEPRED)
                            (("2" (DELETE -2 -4)
                              (("2" (INST - "y!1")
                                (("2" (SKOLEM-TYPEPRED)
                                  (("2" (INST - "x!1")
                                    (("2" (SKOLEM-TYPEPRED)
                                      (("2"
                                        (ASSERT)
                                        (("2"
                                          (INST + "x!2")
                                          (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|swap_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|swap_is_permutation| "" (SKOLEM-TYPEPRED)
  (("" (EXPAND "permutation")
    (("" (EXPAND "swap")
      (("" (CASE "i!1=j!1")
        (("1" (ASSERT)
          (("1" (INST + "I") (("1" (EXPAND "I") (("1" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2"
          (INST +
           "LAMBDA (k: below(n!1)): COND k=j!1->i!1, k=i!1->j!1, ELSE -> k ENDCOND")
          (("1" (GRIND) NIL NIL)
           ("2" (EXPAND "bijective?")
            (("2" (EXPAND "injective?")
              (("2" (EXPAND "surjective?")
                (("2" (SPLIT)
                  (("1" (GRIND) NIL NIL)
                   ("2" (SKOLEM-TYPEPRED)
                    (("2"
                      (INST +
                       "COND y!1 = i!1 -> j!1, y!1=j!1 -> i!1, ELSE -> y!1 ENDCOND")
                      (("1" (LIFT-IF)
                        (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                       ("2" (ASSERT)
                        (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|sort2_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|sort2_TCC2| "" (TERMINATION-TCC) NIL NIL)
 (|sort2_TCC3| "" (SUBTYPE-TCC) NIL NIL)
 (|sort2_correct_permutation| "" (SKOLEM-TYPEPRED)
  (("" (SKOLEM-TYPEPRED)
    (("" (INDUCT "l")
      (("1" (FLATTEN)
        (("1" (EXPAND "sort2")
          (("1" (USE "swap_is_permutation")
            (("1" (ASSERT)
              (("1" (LIFT-IF)
                (("1" (ASSERT)
                  (("1" (GROUND)
                    (("1" (DELETE -2)
                      (("1" (EXPAND "permutation")
                        (("1" (INST + "I")
                          (("1" (SKOLEM-TYPEPRED)
                            (("1" (EXPAND "I") (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOLEM-TYPEPRED)
        (("2" (FLATTEN)
          (("2" (LEMMA "permutation_of_permutation")
            (("2"
              (INST - "n!1" "s!1" "sort2(n!1, s!1, j!1, jb!1)"
               "sort2(n!1, s!1, j!1, jb!1 + 1)")
              (("1" (ASSERT)
                (("1" (DELETE 2)
                  (("1" (EXPAND "sort2" 1 2)
                    (("1" (USE "swap_is_permutation")
                      (("1" (ASSERT)
                        (("1" (LIFT-IF)
                          (("1" (ASSERT)
                            (("1" (GROUND)
                              (("1" (EXPAND "permutation" +)
                                (("1" (INST + "I")
                                  (("1" (EXPAND "I") (("1" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|sort2_correct_ordered_induction_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|sort2_correct_ordered_induction_TCC2| "" (SUBTYPE-TCC) NIL NIL)
 (|sort2_correct_ordered_induction_TCC3| "" (SUBTYPE-TCC) NIL NIL)
 (|sort2_correct_ordered_induction| "" (SKOLEM-TYPEPRED)
  (("" (SKOLEM-TYPEPRED)
    (("" (INDUCT "l")
      (("1" (ASSERT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL)
       ("2" (SKOLEM-TYPEPRED)
        (("2" (FLATTEN)
          (("2" (ASSERT)
            (("2" (EXPAND "sort2" +)
              (("2" (LIFT-IF) (("2" (POSTPONE) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("3" (SKOLEM-TYPEPRED)
        (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("4" (SKOLEM-TYPEPRED) (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|sort_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|sort_TCC2| "" (SUBTYPE-TCC) NIL NIL)
 (|sort_TCC3| "" (SUBTYPE-TCC) NIL NIL)
 (|sort_correct_permutation| "" (SKOLEM-TYPEPRED)
  (("" (INDUCT "j")
    (("1" (FLATTEN)
      (("1" (GRIND) (("1" (INST + "I") (("1" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKOLEM-TYPEPRED)
      (("2" (FLATTEN)
        (("2" (LEMMA "permutation_of_permutation")
          (("2"
            (INST - "n!1" "s!1" "sort(n!1, s!1, jb!1)"
             "sort(n!1, s!1, jb!1 + 1)")
            (("1" (ASSERT)
              (("1" (DELETE 2)
                (("1" (EXPAND "sort" 1 2)
                  (("1" (USE "swap_is_permutation") (("1" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|sort_correct_ordered_induction_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|sort_correct_ordered_induction| "" (SKOLEM-TYPEPRED)
  (("" (INDUCT "j")
    (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKOLEM-TYPEPRED)
      (("2" (FLATTEN)
        (("2" (EXPAND "ordered")
          (("2" (SKOLEM-TYPEPRED)
            (("2" (EXPAND "sort" +)
              (("2" (EXPAND "swap")
                (("2" (LIFT-IF)
                  (("2" (LIFT-IF)
                    (("2"
                      (CASE "i!1+1<greatest(2 + jb!1, LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i))")
                      (("1" (ASSERT) (("1" (INST - "i!1") NIL NIL)) NIL)
                       ("2" (ASSERT)
                        (("2"
                          (CASE "i!1>greatest(2 + jb!1, LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i))")
                          (("1" (ASSERT)
                            (("1" (CASE "i!1=jb!1")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1)
                                  (("1"
                                    (LEMMA "greatest_correct"
                                     ("n" "2+jb!1" "s"
                                      "LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i)"))
                                    (("1" (INST - "jb!1")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) (("2" (INST - "i!1") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2"
                              (CASE "i!1 = greatest(2 + jb!1, LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i))")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 + RL)
                                  (("1" (SPLIT)
                                    (("1" (FLATTEN)
                                      (("1"
                                        (REPLACE -1)
                                        (("1"
                                          (LEMMA
                                           "greatest_correct"
                                           ("n"
                                            "2+jb!1"
                                            "s"
                                            "LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i)"))
                                          (("1"
                                            (INST - "jb!1+1")
                                            (("1" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2"
                                        (LEMMA
                                         "greatest_correct"
                                         ("n"
                                          "2+jb!1"
                                          "s"
                                          "LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i)"))
                                        (("2"
                                          (INST - "i!1+1")
                                          (("2"
                                            (ASSERT)
                                            (("2"
                                              (REPLACE -2 -1 RL)
                                              (("2"
                                                (TYPEPRED "<=")
                                                (("2"
                                                  (EXPAND "total_order?")
                                                  (("2"
                                                    (FLATTEN)
                                                    (("2"
                                                      (EXPAND
                                                       "partial_order?")
                                                      (("2"
                                                        (FLATTEN)
                                                        (("2"
                                                          (EXPAND
                                                           "antisymmetric?")
                                                          (("2"
                                                            (INST
                                                             -
                                                             "sort(n!1, s!1, jb!1)(1 + i!1)"
                                                             "sort(n!1, s!1, jb!1)(i!1)")
                                                            (("2"
                                                              (ASSERT)
                                                              (("2"
                                                                (INST - "i!1")
                                                                (("2"
                                                                  (ASSERT)
                                                                  (("2"
                                                                    (REPLACE

                                                                     -2
                                                                     +)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "greatest_correct"
                                                                       ("n"
                                                                        "2+jb!1"
                                                                        "s"
                                                                        "LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i)"))
                                                                      (("2"
                                                                        (INST
                                                                         -
                                                                         "jb!1+1")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2"
                                  (CASE "i!1+1=greatest(2 + jb!1, LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i))")
                                  (("1" (ASSERT)
                                    (("1" (SPLIT)
                                      (("1"
                                        (FLATTEN)
                                        (("1"
                                          (LEMMA
                                           "greatest_correct"
                                           ("n"
                                            "2+jb!1"
                                            "s"
                                            "LAMBDA (i: below(2 + jb!1)): sort(n!1, s!1, jb!1)(i)"))
                                          (("1"
                                            (INST - "i!1")
                                            (("1" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (FLATTEN)
                                        (("2"
                                          (ASSERT)
                                          (("2"
                                            (REPLACE -1 + RL)
                                            (("2"
                                              (ASSERT)
                                              (("2" (POSTPONE) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (SKOLEM-TYPEPRED) (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|sort_correct_ordered_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|sort_correct_ordered| "" (SKOLEM-TYPEPRED)
  (("" (USE "sort_correct_ordered_induction")
    (("" (ASSERT) (("" (EXPAND "ordered") (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL))
  NIL)
 (|permutation_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|sorted_sequence_exists| "" (INST + "sort(k+1, s, k)")
  (("1" (EXPAND "permutation")
    (("1" (EXPAND "ordered")
      (("1" (USE "sort_correct_permutation")
        (("1" (ASSERT)
          (("1" (USE "sort_correct_ordered")
            (("1" (ASSERT) NIL NIL)
             ("2" (DELETE -1 2) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (DELETE 2) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
  NIL)
 (|sp_TCC1| "" (USE "sorted_sequence_exists")
  (("" (ASSERT) (("" (SKOLEM-TYPEPRED) (("" (INST + "sp!1") NIL NIL)) NIL))
    NIL))
  NIL)
 (|neighbor_theorem_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|neighbor_theorem_TCC2| "" (SUBTYPE-TCC) NIL NIL)
 (|neighbor_theorem| "" (SPLIT)
  (("1" (FLATTEN)
    (("1" (SKOLEM-TYPEPRED)
      (("1" (USE "permutation")
        (("1" (FLATTEN)
          (("1" (COPY -2)
            (("1" (DELETE -2)
              (("1" (INST - "i!1")
                (("1" (INST - "i!1+1")
                  (("1" (SKOLEM-TYPEPRED)
                    (("1" (SKOLEM-TYPEPRED)
                      (("1" (ASSERT)
                        (("1" (INST + "j!1" "j!2")
                          (("1" (ASSERT)
                            (("1" (EXPAND "/=") (("1" (POSTPONE) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ("2" (FLATTEN)
    (("2" (SKOLEM-TYPEPRED) (("2" (FLATTEN) (("2" (POSTPONE) NIL NIL)) NIL))
      NIL))
    NIL))
  NIL))
(|new_sorting_network|
 (|lesseqp_TCC1| "" (USE "order_exists")
  (("" (ASSERT) (("" (SKOLEM-TYPEPRED) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)
 (|strict_is_transitive| "" (EXPAND "transitive?")
  (("" (SKOLEM-TYPEPRED)
    (("" (FLATTEN)
      (("" (EXPAND "<")
        (("" (EXPAND "=>")
          (("" (TYPEPRED "new_sorting_network.<=")
            (("" (EXPAND "total_order?")
              (("" (FLATTEN)
                (("" (EXPAND "partial_order?")
                  (("" (FLATTEN)
                    (("" (EXPAND "preorder?")
                      (("" (FLATTEN)
                        (("" (EXPAND "transitive?")
                          (("" (INST - "z!1" "x!1" "y!1")
                            (("" (ASSERT)
                              (("" (EXPAND "dichotomous?")
                                (("" (INST - "x!1" "y!1")
                                  (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|ordered_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|ordered_TCC2| "" (SUBTYPE-TCC) NIL NIL)
 (|permutation_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|sp_TCC1| "" (USE "sorted_sequence_exists")
  (("" (SKOLEM-TYPEPRED) (("" (INST + "sp!1") NIL NIL)) NIL)) NIL)
 (|sp_ord_reflexive| "" (TYPEPRED "<=") (("" (GRIND) NIL NIL)) NIL)
 (|trans_induct_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|trans_induct| "" (INDUCT "j")
  (("1" (SKOLEM-TYPEPRED)
    (("1" (ASSERT)
      (("1" (USE "sp_ord_reflexive" ("l" "i!1"))
        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ("2" (SKOLEM-TYPEPRED)
    (("2" (FLATTEN)
      (("2" (TYPEPRED "<=")
        (("2" (EXPAND "total_order?")
          (("2" (FLATTEN)
            (("2" (EXPAND "partial_order?")
              (("2" (FLATTEN)
                (("2" (EXPAND "preorder?")
                  (("2" (FLATTEN)
                    (("2" (EXPAND "transitive?")
                      (("2" (TYPEPRED "sp")
                        (("2" (EXPAND "ordered")
                          (("2" (EXPAND "ordered")
                            (("2" (SKOLEM-TYPEPRED)
                              (("2" (CASE "i!1=jt!1+1")
                                (("1" (USE "sp_ord_reflexive" ("l" "jt!1+1"))
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (CASE "i!1<=jt!1")
                                  (("1" (INST -11 "i!1")
                                    (("1"
                                      (INST
                                       -
                                       "sp(i!1)"
                                       "sp(jt!1)"
                                       "sp(jt!1+1)")
                                      (("1"
                                        (ASSERT)
                                        (("1" (INST - "jt!1") NIL NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL)
                                       ("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|neighbor_aux_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|neighbor_aux_TCC2| "" (SUBTYPE-TCC) NIL NIL)
 (|neighbor_aux| "" (FLATTEN)
  (("" (SKOLEM-TYPEPRED)
    (("" (FLATTEN)
      (("" (INST + "l!1")
        (("1" (CASE "j!1=1")
          (("1" (ASSERT) NIL NIL)
           ("2" (CASE "sp(l!1)<sp(l!1+1)")
            (("1" (ASSERT)
              (("1" (CASE "sp(l!1+1)<sp(j!1+l!1)")
                (("1" (ASSERT)
                  (("1" (USE "strict_is_transitive")
                    (("1" (EXPAND "transitive?")
                      (("1" (INST - "sp(l!1)" "sp(1+l!1)" "sp(j!1+l!1)")
                        (("1" (ASSERT)
                          (("1" (EXPAND "<" -1)
                            (("1" (EXPAND "=>")
                              (("1" (ASSERT)
                                (("1" (REPLACE -7)
                                  (("1"
                                    (USE "sp_ord_reflexive" ("l" "l!1+j!1"))
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (DELETE -1)
                  (("2" (EXPAND "<")
                    (("2" (EXPAND "=>")
                      (("2" (CASE "antisymmetric?[T](<=)")
                        (("1" (EXPAND "antisymmetric?")
                          (("1" (INST - "sp(l!1+1)" "sp(j!1+l!1)")
                            (("1" (ASSERT)
                              (("1"
                                (USE "trans_induct"
                                     ("i" "l!1+1" "j" "j!1+l!1"))
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (CASE "total_order?[T](<=)")
                            (("1" (EXPAND "total_order?")
                              (("1" (EXPAND "partial_order?")
                                (("1" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "<")
              (("2" (EXPAND "=>")
                (("2" (CASE "antisymmetric?[T](<=)")
                  (("1" (EXPAND "antisymmetric?")
                    (("1" (INST - "sp(1+l!1)" "sp(l!1)")
                      (("1" (ASSERT)
                        (("1" (CASE "ordered(sp)")
                          (("1" (EXPAND "ordered")
                            (("1" (EXPAND "ordered")
                              (("1" (INST - "l!1") NIL NIL)) NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (CASE "total_order?[T](<=)")
                      (("1" (EXPAND "total_order?")
                        (("1" (EXPAND "partial_order?")
                          (("1" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (ASSERT) NIL NIL))
            NIL))
          NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|neighbor_theorem_TCC1| "" (SUBTYPE-TCC) NIL NIL)
 (|neighbor_theorem_TCC2| "" (SUBTYPE-TCC) NIL NIL)
 (|neighbor_theorem| "" (TYPEPRED "sp")
  (("" (SPLIT)
    (("1" (FLATTEN)
      (("1" (SKOLEM-TYPEPRED)
        (("1" (EXPAND "permutation")
          (("1" (EXPAND "permutation")
            (("1" (SKOLEM-TYPEPRED)
              (("1" (EXPAND "bijective?")
                (("1" (FLATTEN)
                  (("1" (EXPAND "injective?")
                    (("1" (EXPAND "surjective?")
                      (("1" (COPY -2)
                        (("1" (INST - "i!1")
                          (("1" (INST -3 "i!1+1")
                            (("1" (SKOLEM-TYPEPRED)
                              (("1" (SKOLEM-TYPEPRED)
                                (("1" (INST + "x!1" "x!2")
                                  (("1" (ASSERT)
                                    (("1" (COPY -8)
                                      (("1"
                                        (COPY -1)
                                        (("1"
                                          (INST - "x!1")
                                          (("1"
                                            (INST - "x!2")
                                            (("1" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (SKOLEM-TYPEPRED)
                                          (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (SKOLEM-TYPEPRED)
                                        (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (FLATTEN)
      (("2" (SKOLEM-TYPEPRED)
        (("2" (USE "neighbor_aux")
          (("2" (SPLIT)
            (("1" (PROPAX) NIL NIL)
             ("2" (DELETE 2)
              (("2" (FLATTEN)
                (("2" (EXPAND "permutation")
                  (("2" (EXPAND "permutation")
                    (("2" (SKOLEM-TYPEPRED)
                      (("2" (EXPAND "bijective?")
                        (("2" (FLATTEN)
                          (("2" (EXPAND "injective?")
                            (("2" (INST - "l!1" "j!1")
                              (("2" (ASSERT)
                                (("2" (CASE "p!1(l!1)<p!1(j!1)")
                                  (("1"
                                    (INST + "p!1(l!1)" "p!1(j!1)-p!1(l!1)")
                                    (("1" (ASSERT)
                                      (("1"
                                        (INST-CP - "l!1")
                                        (("1"
                                          (INST-CP - "j!1")
                                          (("1" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2"
                                      (INST + "p!1(j!1)" "p!1(l!1)-p!1(j!1)")
                                      (("2"
                                        (ASSERT)
                                        (("2"
                                          (INST-CP - "j!1")
                                          (("2"
                                            (INST-CP - "l!1")
                                            (("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL))

